#!/usr/bin/env python3
"""
RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
"""

import chromadb
from sentence_transformers import SentenceTransformer
import ollama
from config import Config
from typing import List, Dict

class RAGSystem:
    def __init__(self):
        self.embedding_model = SentenceTransformer(Config.EMBEDDING_MODEL)
        self.client = chromadb.PersistentClient(path=str(Config.DB_DIR))
        self.ollama_model = Config.OLLAMA_MODEL
    
    def search_relevant_chunks(
        self,
        query: str,
        subject: str,
        grade: int,
        n_results: int = 3
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ chunks –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        collection_name = f"{Config.CHROMA_COLLECTION_PREFIX}_{subject}_{grade}"
        
        try:
            collection = self.client.get_collection(name=collection_name)
        except:
            raise ValueError(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 3_create_embeddings.py")
        
        # –°–æ–∑–¥–∞—ë–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = self.embedding_model.encode([query])[0].tolist()
        
        # –ü–æ–∏—Å–∫
        results = collection.query(
            query_embeddings=[query_embedding],
            n_results=n_results
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        chunks = []
        for i in range(len(results['ids'][0])):
            chunks.append({
                'id': results['ids'][0][i],
                'document': results['documents'][0][i],
                'metadata': results['metadatas'][0][i],
                'distance': results['distances'][0][i]
            })
        
        return chunks
    
    def create_prompt(self, query: str, chunks: List[Dict], grade: int, subject: str) -> str:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        """
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ chunks
        context_parts = []
        for idx, chunk in enumerate(chunks, 1):
            metadata = chunk['metadata']
            context_parts.append(
                f"[–ò—Å—Ç–æ—á–Ω–∏–∫ {idx}]\n"
                f"–£—á–µ–±–Ω–∏–∫: {metadata.get('textbook_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {metadata.get('page', '?')}\n"
                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{chunk['document']}\n"
            )
        
        context = "\n".join(context_parts)
        
        prompt = f"""–¢—ã ‚Äî —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞ {grade} –∫–ª–∞—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –£–ß–ï–ë–ù–ò–ö–ê:
{context}

–í–û–ü–†–û–° –£–ß–ï–ù–ò–ö–ê:
{query}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. –û–±—ä—è—Å–Ω—è–π –Ω–∞ —É—Ä–æ–≤–Ω–µ {grade} –∫–ª–∞—Å—Å–∞
3. –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —É—á–µ–±–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
4. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
5. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü—É —É—á–µ–±–Ω–∏–∫–∞)
6. –û–±—ä—è—Å–Ω—è–π –ø–æ—à–∞–≥–æ–≤–æ

–û–¢–í–ï–¢:"""
        
        return prompt
    
    def answer_question(
        self,
        query: str,
        subject: str,
        grade: int,
        n_results: int = 3,
        verbose: bool = False
    ) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–∏—Å–∫ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        """
        # 1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö chunks
        if verbose:
            print(f"\nüîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —É—á–µ–±–Ω–∏–∫–µ ({subject}, {grade} –∫–ª–∞—Å—Å)...")
        
        chunks = self.search_relevant_chunks(query, subject, grade, n_results)
        
        if verbose:
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(chunks)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:")
            for idx, chunk in enumerate(chunks, 1):
                print(f"  {idx}. {chunk['metadata'].get('textbook_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                      f"—Å—Ç—Ä. {chunk['metadata'].get('page', '?')} "
                      f"(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {1 - chunk['distance']:.2f})")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        prompt = self.create_prompt(query, chunks, grade, subject)
        
        if verbose:
            print(f"\nüí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–º–æ–¥–µ–ª—å: {self.ollama_model})...")
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama
        try:
            response = ollama.generate(
                model=self.ollama_model,
                prompt=prompt
            )
            
            answer = response['response']
            
        except Exception as e:
            answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'query': query,
            'answer': answer,
            'sources': [
                {
                    'textbook': chunk['metadata'].get('textbook_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'page': chunk['metadata'].get('page', '?'),
                    'relevance': 1 - chunk['distance']
                }
                for chunk in chunks
            ],
            'metadata': {
                'subject': subject,
                'grade': grade,
                'model': self.ollama_model,
                'chunks_used': len(chunks)
            }
        }
        
        return result


def interactive_mode():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("=== RAG –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —É—á–µ–±–Ω–∏–∫–æ–≤ ===")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏—Å—Ç–æ—Ä–∏—è")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: 5, 6, 7")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'\n")
    
    rag = RAGSystem()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    subject = input("–ü—Ä–µ–¥–º–µ—Ç: ").strip().lower()
    grade = int(input("–ö–ª–∞—Å—Å: ").strip())
    
    print(f"\n‚úì –†–∞–±–æ—Ç–∞–µ–º —Å: {subject}, {grade} –∫–ª–∞—Å—Å")
    print("–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–Ω–∏–∫—É:\n")
    
    while True:
        query = input(f"\n[{subject} {grade}] –í–æ–ø—Ä–æ—Å: ").strip()
        
        if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        if not query:
            continue
        
        try:
            result = rag.answer_question(
                query=query,
                subject=subject,
                grade=grade,
                verbose=True
            )
            
            print(f"\n{'='*60}")
            print("–û–¢–í–ï–¢:")
            print(f"{'='*60}")
            print(result['answer'])
            print(f"\n{'='*60}")
            print("–ò–°–¢–û–ß–ù–ò–ö–ò:")
            for idx, source in enumerate(result['sources'], 1):
                print(f"  {idx}. {source['textbook']}, —Å—Ç—Ä. {source['page']} "
                      f"(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['relevance']:.2%})")
            print(f"{'='*60}")
            
        except ValueError as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def test_query(subject: str, grade: int, query: str):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    """
    rag = RAGSystem()
    
    result = rag.answer_question(
        query=query,
        subject=subject,
        grade=grade,
        verbose=True
    )
    
    print(f"\n{'='*60}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ü–†–û–°–ê")
    print(f"{'='*60}")
    print(f"–í–æ–ø—Ä–æ—Å: {result['query']}")
    print(f"\n–û—Ç–≤–µ—Ç:\n{result['answer']}")
    print(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
    for source in result['sources']:
        print(f"  - {source['textbook']}, —Å—Ç—Ä. {source['page']}")
    print(f"{'='*60}")
    
    return result


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        # –ü—Ä–∏–º–µ—Ä: python 4_rag_query.py –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 5 "–ö–∞–∫ —Å–ª–æ–∂–∏—Ç—å –¥—Ä–æ–±–∏?"
        if len(sys.argv) >= 4:
            subject = sys.argv[1]
            grade = int(sys.argv[2])
            query = " ".join(sys.argv[3:])
            test_query(subject, grade, query)
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python 4_rag_query.py <–ø—Ä–µ–¥–º–µ—Ç> <–∫–ª–∞—Å—Å> <–≤–æ–ø—Ä–æ—Å>")
            print("–ü—Ä–∏–º–µ—Ä: python 4_rag_query.py –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 5 '–ö–∞–∫ —Å–ª–æ–∂–∏—Ç—å –¥—Ä–æ–±–∏?'")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_mode()